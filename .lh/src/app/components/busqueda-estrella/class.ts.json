{
    "sourceFile": "src/app/components/busqueda-estrella/class.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 1,
            "patches": [
                {
                    "date": 1682033628024,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1682033650886,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -103,5 +103,88 @@\n   console.log('El camino más corto es: ' + shortestPath.join(' -> '));\n   } else {\n   console.log('No se encontró un camino posible.');\n   }\n-  \n\\ No newline at end of file\n+  /* class City {\n+  name: string;\n+  x: number;\n+  y: number;\n+  distanceToFinish: number;\n+  totalDistance: number;\n+  visited: boolean;\n+  neighbors: City[];\n+\n+  constructor(name: string, x: number, y: number, distanceToFinish: number) {\n+    this.name = name;\n+    this.x = x;\n+    this.y = y;\n+    this.distanceToFinish = distanceToFinish;\n+    this.totalDistance = Infinity;\n+    this.visited = false;\n+    this.neighbors = [];\n+  }\n+\n+  addNeighbor(city: City, distance: number) {\n+    this.neighbors.push(city);\n+    city.neighbors.push(this);\n+  }\n+}\n+\n+function findShortestPath(startCity: City, finishCity: City) {\n+  const citiesToVisit = [startCity];\n+\n+  startCity.totalDistance = 0;\n+\n+  while (citiesToVisit.length > 0) {\n+    citiesToVisit.sort((a, b) => a.totalDistance - b.totalDistance);\n+    const currentCity = citiesToVisit.shift()!;\n+    currentCity.visited = true;\n+\n+    if (currentCity === finishCity) {\n+      const path: string[] = [];\n+      let city = finishCity;\n+\n+      while (city !== startCity) {\n+        path.unshift(city.name);\n+        city = city.neighbors.reduce((a, b) => a.totalDistance < b.totalDistance ? a : b);\n+      }\n+\n+      path.unshift(startCity.name);\n+      return path;\n+    }\n+\n+    currentCity.neighbors.forEach((neighbor) => {\n+      if (!neighbor.visited) {\n+        const tentativeTotalDistance = currentCity.totalDistance + 1;\n+        if (tentativeTotalDistance < neighbor.totalDistance) {\n+          neighbor.totalDistance = tentativeTotalDistance;\n+          citiesToVisit.push(neighbor);\n+        }\n+      }\n+    });\n+  }\n+\n+  return null;\n+}\n+\n+const cartagena = new City('Cartagena', 2, 6, 3);\n+const barranquilla = new City('Barranquilla', 4, 5, 2);\n+const santaMarta = new City('Santa Marta', 4, 4, 1);\n+const valledupar = new City('Valledupar', 7, 6, 4);\n+const bucaramanga = new City('Bucaramanga', 8, 3, 5);\n+const cucuta = new City('Cúcuta', 10, 1, 7);\n+const bogota = new City('Bogotá', 7, 1, 6);\n+const manizales = new City('Manizales', 5, 2, 3);\n+const pereira = new City('Pereira', 6, 2, 2);\n+const medellin = new City('Medellín', 4, 1, 0);\n+\n+cartagena.addNeighbor(barranquilla, 1);\n+barranquilla.addNeighbor(santaMarta, 1);\n+santaMarta.addNeighbor(valledupar, 3);\n+valledupar.addNeighbor(bogota, 4);\n+bogota.addNeighbor(manizales, 1);\n+bogota.addNeighbor(pereira, 1);\n+manizales.addNeighbor(pereira, 1);\n+pereira.addNeighbor(bucaramanga, 3);\n+bucaramanga.addNeighbor(cucuta, 4);\n+cucuta.addNeighbor(medellin\n+ */\n\\ No newline at end of file\n"
                }
            ],
            "date": 1682033628024,
            "name": "Commit-0",
            "content": "class City {\n    name: string;\n    x: number;\n    y: number;\n    distanceToFinish: number;\n    totalDistance: number;\n    visited: boolean;\n    neighbors: City[];\n  \n    constructor(name: string, x: number, y: number, distanceToFinish: number) {\n      this.name = name;\n      this.x = x;\n      this.y = y;\n      this.distanceToFinish = distanceToFinish;\n      this.totalDistance = Infinity;\n      this.visited = false;\n      this.neighbors = [];\n    }\n  \n    addNeighbor(city: City, distance: number) {\n      this.neighbors.push(city);\n      city.neighbors.push(this);\n    }\n  }\n  \n  function findShortestPath(startCity: City, finishCity: City) {\n    const citiesToVisit = [startCity];\n  \n    startCity.totalDistance = 0;\n  \n    while (citiesToVisit.length > 0) {\n      citiesToVisit.sort((a, b) => a.totalDistance - b.totalDistance);\n      const currentCity = citiesToVisit.shift()!;\n      currentCity.visited = true;\n  \n      if (currentCity === finishCity) {\n        const path: string[] = [];\n        let city = finishCity;\n  \n        while (city !== startCity) {\n          path.unshift(city.name);\n          city = city.neighbors.reduce((a, b) => {\n            return b.totalDistance < a.totalDistance ? b : a;\n          });\n        }\n  \n        path.unshift(startCity.name);\n        return path;\n      }\n  \n      currentCity.neighbors.forEach((neighbor) => {\n        if (!neighbor.visited) {\n          const distanceToNeighbor = Math.sqrt(\n            Math.pow(currentCity.x - neighbor.x, 2) +\n              Math.pow(currentCity.y - neighbor.y, 2)\n          );\n          const totalDistance =\n            currentCity.totalDistance +\n            distanceToNeighbor +\n            neighbor.distanceToFinish;\n  \n          if (totalDistance < neighbor.totalDistance) {\n            neighbor.totalDistance = totalDistance;\n          }\n  \n          if (!citiesToVisit.includes(neighbor)) {\n            citiesToVisit.push(neighbor);\n          }\n        }\n      });\n    }\n  \n    return null;\n  }\n  \n  // Crear las ciudades\n  const cartagena = new City('Cartagena', 0, 0, 415);\n  const barranquilla = new City('Barranquilla', 150, 0, 380);\n  const santaMarta = new City('Santa Marta', 250, 50, 260);\n  const valledupar = new City('Valledupar', 300, 100, 180);\n  const bucaramanga = new City('Bucaramanga', 400, 200, 210);\n  const cucuta = new City('Cúcuta', 450, 250, 310);\n  const bogota = new City('Bogotá', 500, 300, 255);\n  const manizales = new City('Manizales', 600, 300, 175);\n  const pereira = new City('Pereira', 650, 350, 125);\n  const medellin = new City('Medellín', 700, 400, 0);\n  \n  // Crear las conexiones entre las ciudades\n  cartagena.addNeighbor(barranquilla, 150);\n  barranquilla.addNeighbor(santaMarta, 200);\n  santaMarta.addNeighbor(valledupar, 150);\n  valledupar.addNeighbor(bucaramanga, 200);\n  bucaramanga.addNeighbor(cucuta, 140);\n  cucuta.addNeighbor(bogota, 480);\n  bogota.addNeighbor(manizales, 190);\n  manizales.addNeighbor(pereira, 40);\n  pereira.addNeighbor(medellin, 180);\n  \n  // Encontrar el camino más corto\n  const shortestPath = findShortestPath(cartagena, medellin);\n  \n  if (shortestPath) {\n  console.log('El camino más corto es: ' + shortestPath.join(' -> '));\n  } else {\n  console.log('No se encontró un camino posible.');\n  }\n  "
        }
    ]
}