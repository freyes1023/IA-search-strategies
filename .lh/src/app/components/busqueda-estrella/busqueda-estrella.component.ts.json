{
    "sourceFile": "src/app/components/busqueda-estrella/busqueda-estrella.component.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 14,
            "patches": [
                {
                    "date": 1681955859280,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1681956090672,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -47,17 +47,17 @@\n     let nodosPorExpandir: Nodo[] = [this.raiz];\n     while (nodosPorExpandir.length > 0) {\n       nodosPorExpandir.sort((a, b) => a.obtenerCostoTotal() + a.heuristica - (b.obtenerCostoTotal() + b.heuristica));\n       const nodoActual = nodosPorExpandir.shift();\n-      if (nodoActual.datos.esSolucion(solucion)) {\n+      if (nodoActual?.datos.esSolucion(solucion)) {\n         return nodoActual;\n       }\n-      const hijos = nodoActual.datos.generarHijos();\n-      hijos.forEach(hijo => {\n-        const costoCamino = nodoActual.costoCamino + hijo.valorArista;\n+      const hijos = nodoActual!.datos.generarHijos();\n+      hijos.forEach((hijo:any) => {\n+        const costoCamino = nodoActual!.costoCamino + hijo.valorArista;\n         const heuristica = hijo.heuristica;\n         delete hijo.valorArista; // Eliminar el valor de la arista para evitar un ciclo infinito en la serialización a JSON\n-        const nodoHijo = nodoActual.agregarHijo(hijo, hijo.valorArista, costoCamino, heuristica);\n+        const nodoHijo = nodoActual!.agregarHijo(hijo, hijo.valorArista, costoCamino, heuristica);\n         nodosPorExpandir.push(nodoHijo);\n       });\n     }\n     return null;\n"
                },
                {
                    "date": 1681956570155,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -28,32 +28,33 @@\n     }\n     return costoTotal;\n   }\n \n-  obtenerCamino(): any[] {\n-    const camino = [];\n+  obtenerCamino(): this[] {\n+    const camino: this[] = [];\n     let nodoActual = this;\n     while (nodoActual) {\n-      camino.push(nodoActual.datos);\n+      camino.push(nodoActual);\n       nodoActual = nodoActual.padre;\n     }\n     return camino.reverse();\n   }\n }\n \n+\n class ArbolBusqueda {\n   constructor(public raiz: Nodo) {}\n \n-  buscar(solucion: any): Nodo {\n+  buscar(solucion: any): Nodo | null {\n     let nodosPorExpandir: Nodo[] = [this.raiz];\n     while (nodosPorExpandir.length > 0) {\n       nodosPorExpandir.sort((a, b) => a.obtenerCostoTotal() + a.heuristica - (b.obtenerCostoTotal() + b.heuristica));\n       const nodoActual = nodosPorExpandir.shift();\n       if (nodoActual?.datos.esSolucion(solucion)) {\n         return nodoActual;\n       }\n-      const hijos = nodoActual!.datos.generarHijos();\n-      hijos.forEach((hijo:any) => {\n+      const hijos = nodoActual?.datos.generarHijos();\n+      hijos.forEach((hijo: { valorArista: number; heuristica: any; }) => {\n         const costoCamino = nodoActual!.costoCamino + hijo.valorArista;\n         const heuristica = hijo.heuristica;\n         delete hijo.valorArista; // Eliminar el valor de la arista para evitar un ciclo infinito en la serialización a JSON\n         const nodoHijo = nodoActual!.agregarHijo(hijo, hijo.valorArista, costoCamino, heuristica);\n"
                },
                {
                    "date": 1681957365577,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -16,10 +16,11 @@\n   agregarHijo(datos: any, valorArista: number, costoCamino: number, heuristica: number): Nodo {\n     const nodo = new Nodo(datos, this, valorArista, costoCamino, heuristica);\n     this.hijos.push(nodo);\n     return nodo;\n-  }\n+}\n \n+\n   obtenerCostoTotal(): number {\n     let costoTotal = this.costoCamino;\n     let nodoActual = this.padre;\n     while (nodoActual) {\n"
                },
                {
                    "date": 1681958832990,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,107 +1,70 @@\n import { Component } from '@angular/core';\n \n-class Nodo {\n-  constructor(\n-    public datos: any,\n-    public padre: Nodo,\n-    public valorArista: number,\n-    public costoCamino: number,\n-    public heuristica: number\n-  ) {\n-    this.hijos = [];\n-  }\n+@Component({\n+  selector: 'app-busqueda-estrella',\n+  templateUrl: './busqueda-estrella.component.html',\n+  styleUrls: ['./busqueda-estrella.component.css']\n+})\n+export class BusquedaEstrellaComponent {\n+  private readonly solucion = 20;\n+  private readonly heuristicaMaxima = 50;\n+  private readonly profundidadMaxima = 5;\n \n-  hijos: Nodo[];\n+  public caminoEncontrado: number[] = [];\n+  public visitados: number[] = [];\n+  public enCola: number[] = [];\n \n-  agregarHijo(datos: any, valorArista: number, costoCamino: number, heuristica: number): Nodo {\n-    const nodo = new Nodo(datos, this, valorArista, costoCamino, heuristica);\n-    this.hijos.push(nodo);\n-    return nodo;\n-}\n+  public iniciarBusqueda(): void {\n+    this.caminoEncontrado = [];\n+    this.visitados = [];\n+    this.enCola = [];\n \n+    const raiz = { valor: 1, heuristica: this.generarHeuristicaAleatoria() };\n+    const cola = [{ nodo: raiz, f: raiz.heuristica }];\n+    this.enCola.push(raiz.valor);\n+    this.visitados.push(raiz.valor);\n \n-  obtenerCostoTotal(): number {\n-    let costoTotal = this.costoCamino;\n-    let nodoActual = this.padre;\n-    while (nodoActual) {\n-      costoTotal += nodoActual.costoCamino;\n-      nodoActual = nodoActual.padre;\n-    }\n-    return costoTotal;\n-  }\n+    while (cola.length > 0) {\n+      const nodoActual = cola.shift()!.nodo;\n \n-  obtenerCamino(): this[] {\n-    const camino: this[] = [];\n-    let nodoActual = this;\n-    while (nodoActual) {\n-      camino.push(nodoActual);\n-      nodoActual = nodoActual.padre;\n-    }\n-    return camino.reverse();\n-  }\n-}\n+      if (nodoActual.valor === this.solucion) {\n+        this.caminoEncontrado = this.obtenerCamino(nodoActual);\n+        return;\n+      }\n \n-\n-class ArbolBusqueda {\n-  constructor(public raiz: Nodo) {}\n-\n-  buscar(solucion: any): Nodo | null {\n-    let nodosPorExpandir: Nodo[] = [this.raiz];\n-    while (nodosPorExpandir.length > 0) {\n-      nodosPorExpandir.sort((a, b) => a.obtenerCostoTotal() + a.heuristica - (b.obtenerCostoTotal() + b.heuristica));\n-      const nodoActual = nodosPorExpandir.shift();\n-      if (nodoActual?.datos.esSolucion(solucion)) {\n-        return nodoActual;\n+      if (nodoActual.profundidad < this.profundidadMaxima) {\n+        const hijos = this.generarHijos(nodoActual);\n+        for (const hijo of hijos) {\n+          if (!this.visitados.includes(hijo.valor)) {\n+            this.visitados.push(hijo.valor);\n+            this.enCola.push(hijo.valor);\n+            cola.push({ nodo: hijo, f: hijo.heuristica + hijo.profundidad });\n+          }\n+        }\n+        cola.sort((a, b) => a.f - b.f);\n       }\n-      const hijos = nodoActual?.datos.generarHijos();\n-      hijos.forEach((hijo: { valorArista: number; heuristica: any; }) => {\n-        const costoCamino = nodoActual!.costoCamino + hijo.valorArista;\n-        const heuristica = hijo.heuristica;\n-        delete hijo.valorArista; // Eliminar el valor de la arista para evitar un ciclo infinito en la serialización a JSON\n-        const nodoHijo = nodoActual!.agregarHijo(hijo, hijo.valorArista, costoCamino, heuristica);\n-        nodosPorExpandir.push(nodoHijo);\n-      });\n     }\n-    return null;\n   }\n-}\n \n-class DatosBusqueda {\n-  constructor(public valor: number, public heuristica: number) {}\n-\n-  esSolucion(solucion: number): boolean {\n-    return this.valor === solucion;\n+  private generarHijos(padre: any): any[] {\n+    const hijos = [];\n+    for (let i = 2; i <= padre.valor * 2; i++) {\n+      const heuristica = this.generarHeuristicaAleatoria();\n+      hijos.push({ valor: i, padre: padre, heuristica: heuristica, profundidad: padre.profundidad + 1 });\n+    }\n+    return hijos;\n   }\n \n-  generarHijos(): any[] {\n-    // Generar los nodos hijos aquí\n-    return [\n-      { valor: 2, valorArista: 1, heuristica: 3 },\n-      { valor: 3, valorArista: 2, heuristica: 2 },\n-      { valor: 4, valorArista: 3, heuristica: 1 }\n-    ];\n+  private generarHeuristicaAleatoria(): number {\n+    return Math.floor(Math.random() * this.heuristicaMaxima);\n   }\n-}\n \n-@Component({\n-  selector: 'app-busqueda-estrella',\n-  templateUrl: './busqueda-estrella.component.html',\n-  styleUrls: ['./busqueda-estrella.component.css']\n-})\n-\n-export class BusquedaEstrellaComponent {\n-  raiz: DatosBusqueda = new DatosBusqueda(1, 4);\n-  arbol: ArbolBusqueda = new ArbolBusqueda(new Nodo(this.raiz, null, 0, 0, this.raiz.heuristica));\n-  \n-  constructor() {\n-  const solucion = 4;\n-  const nodoSolucion = this.arbol.buscar(solucion);\n-  if (nodoSolucion) {\n-  console.log('Solución encontrada!');\n-  console.log('Camino: ', nodoSolucion.obtenerCamino());\n-  console.log('Costo total: ', nodoSolucion.obtenerCostoTotal());\n-  } else {\n-  console.log('Solución no encontrada');\n+  private obtenerCamino(nodo: any): number[] {\n+    const camino = [];\n+    while (nodo) {\n+      camino.push(nodo.valor);\n+      nodo = nodo.padre;\n+    }\n+    return camino.reverse();\n   }\n-  }\n-  }\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1681958992332,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -24,9 +24,9 @@\n     this.enCola.push(raiz.valor);\n     this.visitados.push(raiz.valor);\n \n     while (cola.length > 0) {\n-      const nodoActual = cola.shift()!.nodo;\n+      const nodoActual:any = cola.shift()!.nodo;\n \n       if (nodoActual.valor === this.solucion) {\n         this.caminoEncontrado = this.obtenerCamino(nodoActual);\n         return;\n"
                },
                {
                    "date": 1681959029864,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,9 +2,9 @@\n \n @Component({\n   selector: 'app-busqueda-estrella',\n   templateUrl: './busqueda-estrella.component.html',\n-  styleUrls: ['./busqueda-estrella.component.css']\n+  styleUrls: ['./busqueda-estrella.component.scss']\n })\n export class BusquedaEstrellaComponent {\n   private readonly solucion = 20;\n   private readonly heuristicaMaxima = 50;\n"
                },
                {
                    "date": 1681961657131,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,70 +1,125 @@\n import { Component } from '@angular/core';\n \n-@Component({\n-  selector: 'app-busqueda-estrella',\n-  templateUrl: './busqueda-estrella.component.html',\n-  styleUrls: ['./busqueda-estrella.component.scss']\n-})\n-export class BusquedaEstrellaComponent {\n-  private readonly solucion = 20;\n-  private readonly heuristicaMaxima = 50;\n-  private readonly profundidadMaxima = 5;\n+class City {\n+  name: string;\n+  x: number;\n+  y: number;\n+  distanceToFinish: number;\n+  totalDistance: number;\n+  visited: boolean;\n+  neighbors: City[];\n \n-  public caminoEncontrado: number[] = [];\n-  public visitados: number[] = [];\n-  public enCola: number[] = [];\n+  constructor(name: string, x: number, y: number, distanceToFinish: number) {\n+    this.name = name;\n+    this.x = x;\n+    this.y = y;\n+    this.distanceToFinish = distanceToFinish;\n+    this.totalDistance = Infinity;\n+    this.visited = false;\n+    this.neighbors = [];\n+  }\n \n-  public iniciarBusqueda(): void {\n-    this.caminoEncontrado = [];\n-    this.visitados = [];\n-    this.enCola = [];\n+  addNeighbor(city: City, distance: number) {\n+    this.neighbors.push(city);\n+    city.neighbors.push(this);\n+  }\n+}\n \n-    const raiz = { valor: 1, heuristica: this.generarHeuristicaAleatoria() };\n-    const cola = [{ nodo: raiz, f: raiz.heuristica }];\n-    this.enCola.push(raiz.valor);\n-    this.visitados.push(raiz.valor);\n+function findShortestPath(startCity: City, finishCity: City) {\n+  const citiesToVisit = [startCity];\n \n-    while (cola.length > 0) {\n-      const nodoActual:any = cola.shift()!.nodo;\n+  startCity.totalDistance = 0;\n \n-      if (nodoActual.valor === this.solucion) {\n-        this.caminoEncontrado = this.obtenerCamino(nodoActual);\n-        return;\n+  while (citiesToVisit.length > 0) {\n+    citiesToVisit.sort((a, b) => a.totalDistance - b.totalDistance);\n+    const currentCity = citiesToVisit.shift()!;\n+    currentCity.visited = true;\n+\n+    if (currentCity === finishCity) {\n+      const path: string[] = [];\n+      let city = finishCity;\n+\n+      while (city !== startCity) {\n+        path.unshift(city.name);\n+        city = city.neighbors.reduce((a, b) => {\n+          return b.totalDistance < a.totalDistance ? b : a;\n\\ No newline at end of file\n+        });\n       }\n \n-      if (nodoActual.profundidad < this.profundidadMaxima) {\n-        const hijos = this.generarHijos(nodoActual);\n-        for (const hijo of hijos) {\n-          if (!this.visitados.includes(hijo.valor)) {\n-            this.visitados.push(hijo.valor);\n-            this.enCola.push(hijo.valor);\n-            cola.push({ nodo: hijo, f: hijo.heuristica + hijo.profundidad });\n-          }\n+      path.unshift(startCity.name);\n+      return path;\n+    }\n+\n+    currentCity.neighbors.forEach((neighbor) => {\n+      if (!neighbor.visited) {\n+        const distanceToNeighbor = Math.sqrt(\n+          Math.pow(currentCity.x - neighbor.x, 2) +\n+            Math.pow(currentCity.y - neighbor.y, 2)\n+        );\n+        const totalDistance =\n+          currentCity.totalDistance +\n+          distanceToNeighbor +\n+          neighbor.distanceToFinish;\n+\n+        if (totalDistance < neighbor.totalDistance) {\n+          neighbor.totalDistance = totalDistance;\n         }\n-        cola.sort((a, b) => a.f - b.f);\n+\n+        if (!citiesToVisit.includes(neighbor)) {\n+          citiesToVisit.push(neighbor);\n+        }\n       }\n-    }\n+    });\n   }\n \n-  private generarHijos(padre: any): any[] {\n-    const hijos = [];\n-    for (let i = 2; i <= padre.valor * 2; i++) {\n-      const heuristica = this.generarHeuristicaAleatoria();\n-      hijos.push({ valor: i, padre: padre, heuristica: heuristica, profundidad: padre.profundidad + 1 });\n-    }\n-    return hijos;\n-  }\n+  return null;\n+}\n \n-  private generarHeuristicaAleatoria(): number {\n-    return Math.floor(Math.random() * this.heuristicaMaxima);\n-  }\n+@Component({\n+  selector: 'app-nombre-componente',\n+  template: `\n+    <div *ngIf=\"shortestPath\">\n+      La ruta más corta es: {{ shortestPath!.join(' -> ') }}\n+    </div>\n+    <div *ngIf=\"!shortestPath\">\n+      No se encontró una ruta desde la ciudad de inicio hasta la ciudad de destino.\n+    </div>\n+  `,\n+})\n+export class NombreComponenteComponent {\n+  shortestPath: string[] | null = null;\n \n-  private obtenerCamino(nodo: any): number[] {\n-    const camino = [];\n-    while (nodo) {\n-      camino.push(nodo.valor);\n-      nodo = nodo.padre;\n+  ngOnInit() {\n+    // Crear las ciudades\n+    const cartagena = new City('Cartagena', 0, 0, 415);\n+    const barranquilla = new City('Barranquilla', 150, 0, 380);\n+    const santaMarta = new City('Santa Marta', 250, 50, 260);\n+    const valledupar = new City('Valledupar', 300, 100, 180);\n+    const bucaramanga = new City('Bucaramanga', 400, 200, 210);\n+    const cucuta = new City('Cúcuta', 450, 250, 310);\n+    const bogota = new City('Bogotá', 500, 300, 255);\n+    const manizales = new City('Manizales', 600, 300, 175);\n+    const pereira = new City('Pereira', 650, 350, 125);\n+    const medellin = new City('Medellín', 700, 400, 0);\n+    \n+    // Crear las conexiones entre las ciudades\n+    cartagena.addNeighbor(barranquilla, 150);\n+    barranquilla.addNeighbor(santaMarta, 200);\n+    santaMarta.addNeighbor(valledupar, 150);\n+    valledupar.addNeighbor(bucaramanga, 200);\n+    bucaramanga.addNeighbor(cucuta, 150);\n+    cucuta.addNeighbor(bogota, 300);\n+    bogota.addNeighbor(manizales, 200);\n+    manizales.addNeighbor(pereira, 50);\n+    pereira.addNeighbor(medellin, 120);\n+    \n+    // Encontrar la ruta más corta desde Cartagena hasta Medellín\n+    const shortestPath = findShortestPath(cartagena, medellin);\n+    \n+    if (shortestPath !== null) {\n+    console.log(`La ruta más corta es: ${shortestPath.join(' -> ')}`);\n+    } else {\n+    console.log('No se encontró una ruta desde la ciudad de inicio hasta la ciudad de destino.');\n     }\n-    return camino.reverse();\n   }\n-}\n+  }\n"
                },
                {
                    "date": 1681961691342,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -75,9 +75,9 @@\n   return null;\n }\n \n @Component({\n-  selector: 'app-nombre-componente',\n+  selector: 'app-busqueda-estrella',\n   template: `\n     <div *ngIf=\"shortestPath\">\n       La ruta más corta es: {{ shortestPath!.join(' -> ') }}\n     </div>\n@@ -121,5 +121,5 @@\n     } else {\n     console.log('No se encontró una ruta desde la ciudad de inicio hasta la ciudad de destino.');\n     }\n   }\n-  }\n\\ No newline at end of file\n+  }\n"
                },
                {
                    "date": 1681961886548,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,6 +1,5 @@\n-import { Component } from '@angular/core';\n-\n+import { Component, OnInit } from '@angular/core';\n class City {\n   name: string;\n   x: number;\n   y: number;\n@@ -77,17 +76,19 @@\n \n @Component({\n   selector: 'app-busqueda-estrella',\n   template: `\n-    <div *ngIf=\"shortestPath\">\n-      La ruta más corta es: {{ shortestPath!.join(' -> ') }}\n-    </div>\n-    <div *ngIf=\"!shortestPath\">\n-      No se encontró una ruta desde la ciudad de inicio hasta la ciudad de destino.\n-    </div>\n-  `,\n+  <div *ngIf=\"shortestPath\">\n+    La ruta más corta es: {{ shortestPath!.join(' -> ') }}\n+  </div>\n+  <div *ngIf=\"!shortestPath\">\n+    No se encontró una ruta desde la ciudad de inicio hasta la ciudad de destino.\n+  </div>\n+`,\n+  styleUrls: ['./busqueda-estrella.component.scss']\n })\n-export class NombreComponenteComponent {\n+export class BusquedaEstrellaComponent implements OnInit {\n+\n   shortestPath: string[] | null = null;\n \n   ngOnInit() {\n     // Crear las ciudades\n@@ -121,5 +122,6 @@\n     } else {\n     console.log('No se encontró una ruta desde la ciudad de inicio hasta la ciudad de destino.');\n     }\n   }\n-  }\n+\n+}\n"
                },
                {
                    "date": 1681961990433,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -77,9 +77,9 @@\n @Component({\n   selector: 'app-busqueda-estrella',\n   template: `\n   <div *ngIf=\"shortestPath\">\n-    La ruta más corta es: {{ shortestPath!.join(' -> ') }}\n+    La ruta más corta es: {{ shortestPath.join(' -> ') }}\n   </div>\n   <div *ngIf=\"!shortestPath\">\n     No se encontró una ruta desde la ciudad de inicio hasta la ciudad de destino.\n   </div>\n"
                },
                {
                    "date": 1681962230744,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -75,16 +75,9 @@\n }\n \n @Component({\n   selector: 'app-busqueda-estrella',\n-  template: `\n-  <div *ngIf=\"shortestPath\">\n-    La ruta más corta es: {{ shortestPath.join(' -> ') }}\n-  </div>\n-  <div *ngIf=\"!shortestPath\">\n-    No se encontró una ruta desde la ciudad de inicio hasta la ciudad de destino.\n-  </div>\n-`,\n+  templateUrl: './busqueda-estrella.component.html',\n   styleUrls: ['./busqueda-estrella.component.scss']\n })\n export class BusquedaEstrellaComponent implements OnInit {\n \n"
                },
                {
                    "date": 1681964256317,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -80,9 +80,9 @@\n   styleUrls: ['./busqueda-estrella.component.scss']\n })\n export class BusquedaEstrellaComponent implements OnInit {\n \n-  shortestPath: string[] | null = null;\n+  shortestPath: string[] | null = [];\n \n   ngOnInit() {\n     // Crear las ciudades\n     const cartagena = new City('Cartagena', 0, 0, 415);\n"
                },
                {
                    "date": 1681964330397,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -80,9 +80,9 @@\n   styleUrls: ['./busqueda-estrella.component.scss']\n })\n export class BusquedaEstrellaComponent implements OnInit {\n \n-  shortestPath: string[] | null = [];\n+  shortestPath: string[] | null = null;\n \n   ngOnInit() {\n     // Crear las ciudades\n     const cartagena = new City('Cartagena', 0, 0, 415);\n@@ -110,8 +110,9 @@\n     // Encontrar la ruta más corta desde Cartagena hasta Medellín\n     const shortestPath = findShortestPath(cartagena, medellin);\n     \n     if (shortestPath !== null) {\n+      this.shortestPath = shortestPath\n     console.log(`La ruta más corta es: ${shortestPath.join(' -> ')}`);\n     } else {\n     console.log('No se encontró una ruta desde la ciudad de inicio hasta la ciudad de destino.');\n     }\n"
                },
                {
                    "date": 1682033455391,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -84,18 +84,18 @@\n   shortestPath: string[] | null = null;\n \n   ngOnInit() {\n     // Crear las ciudades\n-    const cartagena = new City('Cartagena', 0, 0, 415);\n-    const barranquilla = new City('Barranquilla', 150, 0, 380);\n-    const santaMarta = new City('Santa Marta', 250, 50, 260);\n-    const valledupar = new City('Valledupar', 300, 100, 180);\n-    const bucaramanga = new City('Bucaramanga', 400, 200, 210);\n-    const cucuta = new City('Cúcuta', 450, 250, 310);\n-    const bogota = new City('Bogotá', 500, 300, 255);\n-    const manizales = new City('Manizales', 600, 300, 175);\n-    const pereira = new City('Pereira', 650, 350, 125);\n-    const medellin = new City('Medellín', 700, 400, 0);\n+    const cartagena = new City('Cartagena', 2, 6, 3);\n+const barranquilla = new City('Barranquilla', 4, 5, 2);\n+const santaMarta = new City('Santa Marta', 4, 4, 1);\n+const valledupar = new City('Valledupar', 7, 6, 4);\n+const bucaramanga = new City('Bucaramanga', 8, 3, 5);\n+const cucuta = new City('Cúcuta', 10, 1, 7);\n+const bogota = new City('Bogotá', 7, 1, 6);\n+const manizales = new City('Manizales', 5, 2, 3);\n+const pereira = new City('Pereira', 6, 2, 2);\n+const medellin = new City('Medellín', 4, 1, 0);\n     \n     // Crear las conexiones entre las ciudades\n     cartagena.addNeighbor(barranquilla, 150);\n     barranquilla.addNeighbor(santaMarta, 200);\n"
                }
            ],
            "date": 1681955859280,
            "name": "Commit-0",
            "content": "import { Component } from '@angular/core';\n\nclass Nodo {\n  constructor(\n    public datos: any,\n    public padre: Nodo,\n    public valorArista: number,\n    public costoCamino: number,\n    public heuristica: number\n  ) {\n    this.hijos = [];\n  }\n\n  hijos: Nodo[];\n\n  agregarHijo(datos: any, valorArista: number, costoCamino: number, heuristica: number): Nodo {\n    const nodo = new Nodo(datos, this, valorArista, costoCamino, heuristica);\n    this.hijos.push(nodo);\n    return nodo;\n  }\n\n  obtenerCostoTotal(): number {\n    let costoTotal = this.costoCamino;\n    let nodoActual = this.padre;\n    while (nodoActual) {\n      costoTotal += nodoActual.costoCamino;\n      nodoActual = nodoActual.padre;\n    }\n    return costoTotal;\n  }\n\n  obtenerCamino(): any[] {\n    const camino = [];\n    let nodoActual = this;\n    while (nodoActual) {\n      camino.push(nodoActual.datos);\n      nodoActual = nodoActual.padre;\n    }\n    return camino.reverse();\n  }\n}\n\nclass ArbolBusqueda {\n  constructor(public raiz: Nodo) {}\n\n  buscar(solucion: any): Nodo {\n    let nodosPorExpandir: Nodo[] = [this.raiz];\n    while (nodosPorExpandir.length > 0) {\n      nodosPorExpandir.sort((a, b) => a.obtenerCostoTotal() + a.heuristica - (b.obtenerCostoTotal() + b.heuristica));\n      const nodoActual = nodosPorExpandir.shift();\n      if (nodoActual.datos.esSolucion(solucion)) {\n        return nodoActual;\n      }\n      const hijos = nodoActual.datos.generarHijos();\n      hijos.forEach(hijo => {\n        const costoCamino = nodoActual.costoCamino + hijo.valorArista;\n        const heuristica = hijo.heuristica;\n        delete hijo.valorArista; // Eliminar el valor de la arista para evitar un ciclo infinito en la serialización a JSON\n        const nodoHijo = nodoActual.agregarHijo(hijo, hijo.valorArista, costoCamino, heuristica);\n        nodosPorExpandir.push(nodoHijo);\n      });\n    }\n    return null;\n  }\n}\n\nclass DatosBusqueda {\n  constructor(public valor: number, public heuristica: number) {}\n\n  esSolucion(solucion: number): boolean {\n    return this.valor === solucion;\n  }\n\n  generarHijos(): any[] {\n    // Generar los nodos hijos aquí\n    return [\n      { valor: 2, valorArista: 1, heuristica: 3 },\n      { valor: 3, valorArista: 2, heuristica: 2 },\n      { valor: 4, valorArista: 3, heuristica: 1 }\n    ];\n  }\n}\n\n@Component({\n  selector: 'app-busqueda-estrella',\n  templateUrl: './busqueda-estrella.component.html',\n  styleUrls: ['./busqueda-estrella.component.css']\n})\n\nexport class BusquedaEstrellaComponent {\n  raiz: DatosBusqueda = new DatosBusqueda(1, 4);\n  arbol: ArbolBusqueda = new ArbolBusqueda(new Nodo(this.raiz, null, 0, 0, this.raiz.heuristica));\n  \n  constructor() {\n  const solucion = 4;\n  const nodoSolucion = this.arbol.buscar(solucion);\n  if (nodoSolucion) {\n  console.log('Solución encontrada!');\n  console.log('Camino: ', nodoSolucion.obtenerCamino());\n  console.log('Costo total: ', nodoSolucion.obtenerCostoTotal());\n  } else {\n  console.log('Solución no encontrada');\n  }\n  }\n  }\n"
        }
    ]
}