{
    "sourceFile": "src/app/pages/expertSystem/expert-system/expert-system.component.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 57,
            "patches": [
                {
                    "date": 1683789106727,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1683789295162,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,5 +1,5 @@\n-import { SignosSintomasService } from './../../../services/queries/signos-sintomas.service';\n+import { MdlSignosSintomas, SignosSintomasService } from './../../../services/queries/signos-sintomas.service';\n import { Component, OnInit } from '@angular/core';\n \n @Component({\n   selector: 'app-expert-system',\n@@ -7,14 +7,18 @@\n   styleUrls: ['./expert-system.component.scss']\n })\n export class ExpertSystemComponent implements OnInit {\n \n+signosSintomas : MdlSignosSintomas[] = [];\n+\n   constructor(private signosSintomasService: SignosSintomasService) { }\n \n   ngOnInit(): void {\n     this.signosSintomasService.getSintomas().subscribe(data => {\n       console.log('data',data);\n-      \n+      if (data) {\n+        this.signosSintomas = data;\n+      }\n     })\n   \n   }\n \n"
                },
                {
                    "date": 1683790293549,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -15,9 +15,9 @@\n   ngOnInit(): void {\n     this.signosSintomasService.getSintomas().subscribe(data => {\n       console.log('data',data);\n       if (data) {\n-        this.signosSintomas = data;\n+        this.signosSintomas = data.sort((a,b) => a.order - b.order );\n       }\n     })\n   \n   }\n"
                },
                {
                    "date": 1683790321041,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -15,9 +15,9 @@\n   ngOnInit(): void {\n     this.signosSintomasService.getSintomas().subscribe(data => {\n       console.log('data',data);\n       if (data) {\n-        this.signosSintomas = data.sort((a,b) => a.order - b.order );\n+        this.signosSintomas = data.sort((a,b) => b.order - a.order );\n       }\n     })\n   \n   }\n"
                },
                {
                    "date": 1683790400776,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -15,9 +15,10 @@\n   ngOnInit(): void {\n     this.signosSintomasService.getSintomas().subscribe(data => {\n       console.log('data',data);\n       if (data) {\n-        this.signosSintomas = data.sort((a,b) => b.order - a.order );\n+        this.signosSintomas = data.sort((a,b) => (a.order > b.order) ? 1 : -1)\n+        console.log('signosSintomas',this.signosSintomas);\n       }\n     })\n   \n   }\n"
                },
                {
                    "date": 1683831973877,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,5 +1,6 @@\n-import { MdlSignosSintomas, SignosSintomasService } from './../../../services/queries/signos-sintomas.service';\n+import { SignosSintomasService } from './../../../services/queries/signos-sintomas.service';\n+import { MdlSignosSintomas } from \"src/app/services/queries/MdlSignosSintomas\";\n import { Component, OnInit } from '@angular/core';\n \n @Component({\n   selector: 'app-expert-system',\n"
                },
                {
                    "date": 1683832013468,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,6 +1,6 @@\n import { SignosSintomasService } from './../../../services/queries/signos-sintomas.service';\n-import { MdlSignosSintomas } from \"src/app/services/queries/MdlSignosSintomas\";\n+import { MdlSignosSintomas } from \"src/app/Interfaces/MdlSignosSintomas\";\n import { Component, OnInit } from '@angular/core';\n \n @Component({\n   selector: 'app-expert-system',\n"
                },
                {
                    "date": 1683832703790,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,9 @@\n import { SignosSintomasService } from './../../../services/queries/signos-sintomas.service';\n import { MdlSignosSintomas } from \"src/app/Interfaces/MdlSignosSintomas\";\n import { Component, OnInit } from '@angular/core';\n+import { RulesService } from 'src/app/services/queries/rules.service';\n+import { IRules } from 'src/app/Interfaces/MdlRules';\n \n @Component({\n   selector: 'app-expert-system',\n   templateUrl: './expert-system.component.html',\n@@ -10,9 +12,9 @@\n export class ExpertSystemComponent implements OnInit {\n \n signosSintomas : MdlSignosSintomas[] = [];\n \n-  constructor(private signosSintomasService: SignosSintomasService) { }\n+  constructor(private signosSintomasService: SignosSintomasService, private rulesService : RulesService) { }\n \n   ngOnInit(): void {\n     this.signosSintomasService.getSintomas().subscribe(data => {\n       console.log('data',data);\n@@ -23,5 +25,14 @@\n     })\n   \n   }\n \n+  addRules(){\n+    const data : IRules =  {\n+      ID : 'R2',\n+      Descripcion : [],\n+      Enfermedad:'001'\n+    }\n+    this.rulesService.addRules(data);\n+  }\n+\n }\n"
                },
                {
                    "date": 1683832889105,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -31,8 +31,8 @@\n       ID : 'R2',\n       Descripcion : [],\n       Enfermedad:'001'\n     }\n-    this.rulesService.addRules(data);\n+    this.rulesService.addRules({ data });\n   }\n \n }\n"
                },
                {
                    "date": 1683832950717,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -25,14 +25,16 @@\n     })\n   \n   }\n \n-  addRules(){\n+  async addRules(){\n     const data : IRules =  {\n       ID : 'R2',\n       Descripcion : [],\n       Enfermedad:'001'\n     }\n-    this.rulesService.addRules({ data });\n+   const response = await this.rulesService.addRules(data);\n+   console.log('response',response);\n+   \n   }\n \n }\n"
                },
                {
                    "date": 1683833221960,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -28,9 +28,9 @@\n \n   async addRules(){\n     const data : IRules =  {\n       ID : 'R2',\n-      Descripcion : [],\n+      Descripcion : ['102', '103', '104'],\n       Enfermedad:'001'\n     }\n    const response = await this.rulesService.addRules(data);\n    console.log('response',response);\n"
                },
                {
                    "date": 1683835038585,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -25,16 +25,407 @@\n     })\n   \n   }\n \n-  async addRules(){\n-    const data : IRules =  {\n-      ID : 'R2',\n-      Descripcion : ['102', '103', '104'],\n-      Enfermedad:'001'\n-    }\n-   const response = await this.rulesService.addRules(data);\n-   console.log('response',response);\n-   \n+  async addRules() {\n+    dataRules.forEach(async element => {\n+      const response = await this.rulesService.addRules(element);\n+      console.log('response', response);\n+    })\n   }\n \n }\n+\n+const dataRules = [\n+  {\n+    ID: 'R3',\n+    Descripcion: ['102', '103', '104'],\n+    Enfermedad: '001'\n+  }, {\n+    ID: 'R4',\n+    Descripcion: ['102', '103', '105'],\n+    Enfermedad: '001'\n+  }, {\n+    ID: 'R5',\n+    Descripcion: ['102', '103', '106'],\n+    Enfermedad: '001'\n+  }, {\n+    ID: 'R6',\n+    Descripcion: ['102', '103', '108'],\n+    Enfermedad: '001'\n+  }, {\n+    ID: 'R7',\n+    Descripcion: ['102', '103', '110'],\n+    Enfermedad: '001'\n+  }, {\n+    ID: 'R8',\n+    Descripcion: ['102', '103', '201'],\n+    Enfermedad: '001'\n+  }, {\n+    ID: 'R9',\n+    Descripcion: ['102', '104', '201'],\n+    Enfermedad: '001'\n+  }, {\n+    ID: 'R10',\n+    Descripcion: ['103', '104', '105'],\n+    Enfermedad: '001'\n+  }, {\n+    ID: 'R11',\n+    Descripcion: ['103', '104', '106'],\n+    Enfermedad: '001'\n+  }, {\n+    ID: 'R12',\n+    Descripcion: ['103', '104', '108'],\n+    Enfermedad: '001'\n+  }, {\n+    ID: 'R13',\n+    Descripcion: ['103', '104', '110'],\n+    Enfermedad: '001'\n+  }, {\n+    ID: 'R14',\n+    Descripcion: ['103', '104', '201'],\n+    Enfermedad: '001'\n+  }, {\n+    ID: 'R15',\n+    Descripcion: ['104', '105', '106'],\n+    Enfermedad: '001'\n+  }, {\n+    ID: 'R16',\n+    Descripcion: ['104', '105', '108'],\n+    Enfermedad: '001'\n+  }, {\n+    ID: 'R17',\n+    Descripcion: ['104', '105', '110'],\n+    Enfermedad: '001'\n+  }, {\n+    ID: 'R18',\n+    Descripcion: ['104', '105', '201'],\n+    Enfermedad: '001'\n+  }, {\n+    ID: 'R19',\n+    Descripcion: ['105', '106', '108'],\n+    Enfermedad: '001'\n+  }, {\n+    ID: 'R20',\n+    Descripcion: ['105', '106', '110'],\n+    Enfermedad: '001'\n+  }, {\n+    ID: 'R21',\n+    Descripcion: ['105', '106', '201'],\n+    Enfermedad: '001'\n+  }, {\n+    ID: 'R22',\n+    Descripcion: ['106', '108', '110'],\n+    Enfermedad: '001'\n+  }, {\n+    ID: 'R23',\n+    Descripcion: ['106', '108', '201'],\n+    Enfermedad: '001'\n+  }, {\n+    ID: 'R24',\n+    Descripcion: ['108', '110', '201'],\n+    Enfermedad: '001'\n+  }, {\n+    ID: 'R25',\n+    Descripcion: ['102', '103', '104', '105'],\n+    Enfermedad: '001'\n+  }, {\n+    ID: 'R26',\n+    Descripcion: ['102', '103', '104', '106'],\n+    Enfermedad: '001'\n+  }, {\n+    ID: 'R27',\n+    Descripcion: ['102', '103', '104', '108'],\n+    Enfermedad: '001'\n+  }, {\n+    ID: 'R28',\n+    Descripcion: ['102', '103', '104', '110'],\n+    Enfermedad: '001'\n+  }, {\n+    ID: 'R29',\n+    Descripcion: ['102', '103', '104', '201'],\n+    Enfermedad: '001'\n+  }, {\n+    ID: 'R30',\n+    Descripcion: ['103', '104', '105', '106'],\n+    Enfermedad: '001'\n+  }, {\n+    ID: 'R31',\n+    Descripcion: ['103', '104', '105', '108'],\n+    Enfermedad: '001'\n+  }, {\n+    ID: 'R32',\n+    Descripcion: ['103', '104', '105', '110'],\n+    Enfermedad: '001'\n+  }, {\n+    ID: 'R33',\n+    Descripcion: ['103', '104', '105', '201'],\n+    Enfermedad: '001'\n+  }, {\n+    ID: 'R34',\n+    Descripcion: ['104', '105', '106', '108'],\n+    Enfermedad: '001'\n+  }, {\n+    ID: 'R35',\n+    Descripcion: ['104', '105', '106', '110'],\n+    Enfermedad: '001'\n+  }, {\n+    ID: 'R36',\n+    Descripcion: ['104', '105', '106', '201'],\n+    Enfermedad: '001'\n+  }, {\n+    ID: 'R37',\n+    Descripcion: ['105', '106', '108', '110'],\n+    Enfermedad: '001'\n+  }, {\n+    ID: 'R38',\n+    Descripcion: ['105', '106', '108', '201'],\n+    Enfermedad: '001'\n+  }, {\n+    ID: 'R39',\n+    Descripcion: ['106', '108', '110', '201'],\n+    Enfermedad: '001'\n+  }, {\n+    ID: 'R40',\n+    Descripcion: ['102', '103', '104', '105', '106'],\n+    Enfermedad: '001'\n+  }, {\n+    ID: 'R41',\n+    Descripcion: ['102', '103', '104', '105', '108'],\n+    Enfermedad: '001'\n+  }, {\n+    ID: 'R42',\n+    Descripcion: ['102', '103', '104', '105', '110'],\n+    Enfermedad: '001'\n+  }, {\n+    ID: 'R43',\n+    Descripcion: ['102', '103', '104', '105', '201'],\n+    Enfermedad: '001'\n+  }, {\n+    ID: 'R44',\n+    Descripcion: ['103', '104', '105', '106', '108'],\n+    Enfermedad: '001'\n+  }, {\n+    ID: 'R45',\n+    Descripcion: ['103', '104', '105', '106', '110'],\n+    Enfermedad: '001'\n+  }, {\n+    ID: 'R46',\n+    Descripcion: ['103', '104', '105', '106', '201'],\n+    Enfermedad: '001'\n+  }, {\n+    ID: 'R47',\n+    Descripcion: ['104', '105', '106', '108', '110'],\n+    Enfermedad: '001'\n+  }, {\n+    ID: 'R48',\n+    Descripcion: ['104', '105', '106', '108', '201'],\n+    Enfermedad: '001'\n+  }, {\n+    ID: 'R49',\n+    Descripcion: ['105', '106', '108', '110', '201'],\n+    Enfermedad: '001'\n+  }, {\n+    ID: 'R50',\n+    Descripcion: ['102', '103', '104', '105', '106', '108'],\n+    Enfermedad: '001'\n+  }, {\n+    ID: 'R51',\n+    Descripcion: ['102', '103', '104', '105', '106', '110'],\n+    Enfermedad: '001'\n+  }, {\n+    ID: 'R52',\n+    Descripcion: ['102', '103', '104', '105', '106', '201'],\n+    Enfermedad: '001'\n+  }, {\n+    ID: 'R53',\n+    Descripcion: ['103', '104', '105', '106', '108', '110'],\n+    Enfermedad: '001'\n+  }, {\n+    ID: 'R54',\n+    Descripcion: ['103', '104', '105', '106', '108', '201'],\n+    Enfermedad: '001'\n+  }, {\n+    ID: 'R55',\n+    Descripcion: ['104', '105', '106', '108', '110', '201'],\n+    Enfermedad: '001'\n+  }, {\n+    ID: 'R56',\n+    Descripcion: ['102', '103', '104', '105', '106', '108', '110'],\n+    Enfermedad: '001'\n+  }, {\n+    ID: 'R57',\n+    Descripcion: ['102', '103', '104', '105', '106', '108', '201'],\n+    Enfermedad: '001'\n+  }, {\n+    ID: 'R58',\n+    Descripcion: ['102', '103', '104', '105', '106', '110', '201'],\n+    Enfermedad: '001'\n+  }, {\n+    ID: 'R59',\n+    Descripcion: ['102', '103', '104', '105', '106', '110', '201'],\n+    Enfermedad: '001'\n+  }/* ,{\n+    ID : 'R60',\n+    Descripcion : ['102', '103', '104'],\n+    Enfermedad:'001'\n+  },{\n+    ID : 'R61',\n+    Descripcion : ['102', '103', '104'],\n+    Enfermedad:'001'\n+  },{\n+    ID : 'R62',\n+    Descripcion : ['102', '103', '104'],\n+    Enfermedad:'001'\n+  },{\n+    ID : 'R63',\n+    Descripcion : ['102', '103', '104'],\n+    Enfermedad:'001'\n+  },{\n+    ID : 'R64',\n+    Descripcion : ['102', '103', '104'],\n+    Enfermedad:'001'\n+  },{\n+    ID : 'R65',\n+    Descripcion : ['102', '103', '104'],\n+    Enfermedad:'001'\n+  },{\n+    ID : 'R66',\n+    Descripcion : ['102', '103', '104'],\n+    Enfermedad:'001'\n+  },{\n+    ID : 'R67',\n+    Descripcion : ['102', '103', '104'],\n+    Enfermedad:'001'\n+  },{\n+    ID : 'R68',\n+    Descripcion : ['102', '103', '104'],\n+    Enfermedad:'001'\n+  },{\n+    ID : 'R69',\n+    Descripcion : ['102', '103', '104'],\n+    Enfermedad:'001'\n+  },{\n+    ID : 'R70',\n+    Descripcion : ['102', '103', '104'],\n+    Enfermedad:'001'\n+  },{\n+    ID : 'R71',\n+    Descripcion : ['102', '103', '104'],\n+    Enfermedad:'001'\n+  },{\n+    ID : 'R72',\n+    Descripcion : ['102', '103', '104'],\n+    Enfermedad:'001'\n+  },{\n+    ID : 'R73',\n+    Descripcion : ['102', '103', '104'],\n+    Enfermedad:'001'\n+  },{\n+    ID : 'R74',\n+    Descripcion : ['102', '103', '104'],\n+    Enfermedad:'001'\n+  },{\n+    ID : 'R75',\n+    Descripcion : ['102', '103', '104'],\n+    Enfermedad:'001'\n+  },{\n+    ID : 'R76',\n+    Descripcion : ['102', '103', '104'],\n+    Enfermedad:'001'\n+  },{\n+    ID : 'R77',\n+    Descripcion : ['102', '103', '104'],\n+    Enfermedad:'001'\n+  },{\n+    ID : 'R78',\n+    Descripcion : ['102', '103', '104'],\n+    Enfermedad:'001'\n+  },{\n+    ID : 'R79',\n+    Descripcion : ['102', '103', '104'],\n+    Enfermedad:'001'\n+  },{\n+    ID : 'R80',\n+    Descripcion : ['102', '103', '104'],\n+    Enfermedad:'001'\n+  },{\n+    ID : 'R81',\n+    Descripcion : ['102', '103', '104'],\n+    Enfermedad:'001'\n+  },{\n+    ID : 'R82',\n+    Descripcion : ['102', '103', '104'],\n+    Enfermedad:'001'\n+  },{\n+    ID : 'R83',\n+    Descripcion : ['102', '103', '104'],\n+    Enfermedad:'001'\n+  },{\n+    ID : 'R84',\n+    Descripcion : ['102', '103', '104'],\n+    Enfermedad:'001'\n+  },{\n+    ID : 'R85',\n+    Descripcion : ['102', '103', '104'],\n+    Enfermedad:'001'\n+  },{\n+    ID : 'R86',\n+    Descripcion : ['102', '103', '104'],\n+    Enfermedad:'001'\n+  },{\n+    ID : 'R87',\n+    Descripcion : ['102', '103', '104'],\n+    Enfermedad:'001'\n+  },{\n+    ID : 'R88',\n+    Descripcion : ['102', '103', '104'],\n+    Enfermedad:'001'\n+  },{\n+    ID : 'R89',\n+    Descripcion : ['102', '103', '104'],\n+    Enfermedad:'001'\n+  },{\n+    ID : 'R90',\n+    Descripcion : ['102', '103', '104'],\n+    Enfermedad:'001'\n+  },{\n+    ID : 'R91',\n+    Descripcion : ['102', '103', '104'],\n+    Enfermedad:'001'\n+  },{\n+    ID : 'R92',\n+    Descripcion : ['102', '103', '104'],\n+    Enfermedad:'001'\n+  },{\n+    ID : 'R93',\n+    Descripcion : ['102', '103', '104'],\n+    Enfermedad:'001'\n+  },{\n+    ID : 'R94',\n+    Descripcion : ['102', '103', '104'],\n+    Enfermedad:'001'\n+  },{\n+    ID : 'R95',\n+    Descripcion : ['102', '103', '104'],\n+    Enfermedad:'001'\n+  },{\n+    ID : 'R96',\n+    Descripcion : ['102', '103', '104'],\n+    Enfermedad:'001'\n+  },{\n+    ID : 'R97',\n+    Descripcion : ['102', '103', '104'],\n+    Enfermedad:'001'\n+  },{\n+    ID : 'R98',\n+    Descripcion : ['102', '103', '104'],\n+    Enfermedad:'001'\n+  },{\n+    ID : 'R99',\n+    Descripcion : ['102', '103', '104'],\n+    Enfermedad:'001'\n+  },{\n+    ID : 'R100',\n+    Descripcion : ['102', '103', '104'],\n+    Enfermedad:'001'\n+  } */]\n\\ No newline at end of file\n"
                },
                {
                    "date": 1683835932848,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -10,33 +10,96 @@\n   styleUrls: ['./expert-system.component.scss']\n })\n export class ExpertSystemComponent implements OnInit {\n \n-signosSintomas : MdlSignosSintomas[] = [];\n+  signosSintomas: MdlSignosSintomas[] = [];\n \n-  constructor(private signosSintomasService: SignosSintomasService, private rulesService : RulesService) { }\n+  constructor(private signosSintomasService: SignosSintomasService, private rulesService: RulesService) { }\n \n   ngOnInit(): void {\n     this.signosSintomasService.getSintomas().subscribe(data => {\n-      console.log('data',data);\n+      console.log('data', data);\n       if (data) {\n-        this.signosSintomas = data.sort((a,b) => (a.order > b.order) ? 1 : -1)\n-        console.log('signosSintomas',this.signosSintomas);\n+        this.signosSintomas = data.sort((a, b) => (a.order > b.order) ? 1 : -1)\n+        console.log('signosSintomas', this.signosSintomas);\n       }\n     })\n-  \n+\n   }\n \n-  async addRules() {\n-    dataRules.forEach(async element => {\n-      const response = await this.rulesService.addRules(element);\n+  /*  async addRules() {\n+     dataRules.forEach(async element => {\n+       const response = await this.rulesService.addRules(element);\n+       console.log('response', response);\n+     }) \n+   }*/\n+  async addSintomas() {\n+    dataSintomas.forEach(async (element: MdlSignosSintomas) => {\n+      const response = await this.signosSintomasService.addSintomas(element);\n       console.log('response', response);\n     })\n   }\n \n }\n+const dataSintomas: MdlSignosSintomas[] = [\n+  {\n+    ID: '103',\n+    Descripcion: 'Migraña',\n+    order: 3\n+  },\n+  {\n+    ID: '104',\n+    Descripcion: 'Tos',\n+    order: 4\n+  },\n+  {\n+    ID: '105',\n+    Descripcion: 'Dolor de garganta',\n+    order: 5\n+  },\n+  {\n+    ID: '106',\n+    Descripcion: 'Congestion Nasal',\n+    order: 6\n+  },\n+  {\n+    ID: '107',\n+    Descripcion: 'Dificultad para respirar',\n+    order: 7\n+  },\n+  {\n+    ID: '108',\n+    Descripcion: 'Fatiga',\n+    order: 8\n+  },\n+  {\n+    ID: '109',\n+    Descripcion: 'Dolor en el pecho',\n+    order: 9\n+  },\n+  {\n+    ID: '110',\n+    Descripcion: 'Dolor Muscular',\n+    order: 10\n+  },\n+  {\n+    ID: '111',\n+    Descripcion: 'Nauseas',\n+    order: 11\n+  },\n+  {\n+    ID: '112',\n+    Descripcion: 'Vomito',\n+    order: 12\n+  },\n+  {\n+    ID: '113',\n+    Descripcion: 'Diarrea',\n+    order: 13\n+  }\n+]\n \n-const dataRules = [\n+/* const dataRules = [\n   {\n     ID: 'R3',\n     Descripcion: ['102', '103', '104'],\n     Enfermedad: '001'\n@@ -263,9 +326,9 @@\n   }, {\n     ID: 'R59',\n     Descripcion: ['102', '103', '104', '105', '106', '110', '201'],\n     Enfermedad: '001'\n-  }/* ,{\n+  },{\n     ID : 'R60',\n     Descripcion : ['102', '103', '104'],\n     Enfermedad:'001'\n   },{\n@@ -427,5 +490,5 @@\n   },{\n     ID : 'R100',\n     Descripcion : ['102', '103', '104'],\n     Enfermedad:'001'\n-  } */]\n\\ No newline at end of file\n+  } ]*/\n\\ No newline at end of file\n"
                },
                {
                    "date": 1683841810190,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -25,23 +25,27 @@\n     })\n \n   }\n \n+  Check(index:number){\n+    this.signosSintomas[index].checked = !this.signosSintomas[index].checked;\n+  }\n+\n   /*  async addRules() {\n      dataRules.forEach(async element => {\n        const response = await this.rulesService.addRules(element);\n        console.log('response', response);\n      }) \n-   }*/\n+   }\n   async addSintomas() {\n     dataSintomas.forEach(async (element: MdlSignosSintomas) => {\n       const response = await this.signosSintomasService.addSintomas(element);\n       console.log('response', response);\n     })\n   }\n-\n+*/\n }\n-const dataSintomas: MdlSignosSintomas[] = [\n+/* const dataSintomas: MdlSignosSintomas[] = [\n   {\n     ID: '103',\n     Descripcion: 'Migraña',\n     order: 3\n@@ -96,9 +100,9 @@\n     Descripcion: 'Diarrea',\n     order: 13\n   }\n ]\n-\n+ */\n /* const dataRules = [\n   {\n     ID: 'R3',\n     Descripcion: ['102', '103', '104'],\n"
                },
                {
                    "date": 1683841875955,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -27,8 +27,10 @@\n   }\n \n   Check(index:number){\n     this.signosSintomas[index].checked = !this.signosSintomas[index].checked;\n+    console.log('signosSintomas', this.signosSintomas);');\n+    \n   }\n \n   /*  async addRules() {\n      dataRules.forEach(async element => {\n"
                },
                {
                    "date": 1683841964946,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -27,9 +27,14 @@\n   }\n \n   Check(index:number){\n     this.signosSintomas[index].checked = !this.signosSintomas[index].checked;\n-    console.log('signosSintomas', this.signosSintomas);');\n+    console.log('signosSintomas', this.signosSintomas);\n+  }\n+\n+  Generate(){\n+    const sintomas = this.signosSintomas.filter(element => element.checked).map(element => element.ID);\n+    console.log('sintomas', sintomas);\n     \n   }\n \n   /*  async addRules() {\n"
                },
                {
                    "date": 1683843347937,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -33,8 +33,13 @@\n \n   Generate(){\n     const sintomas = this.signosSintomas.filter(element => element.checked).map(element => element.ID);\n     console.log('sintomas', sintomas);\n+\n+    this.rulesService.getRulesContains(sintomas).then(data => {\n+      console.log('data',data);\n+      \n+    })\n     \n   }\n \n   /*  async addRules() {\n"
                },
                {
                    "date": 1683843840164,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -35,9 +35,9 @@\n     const sintomas = this.signosSintomas.filter(element => element.checked).map(element => element.ID);\n     console.log('sintomas', sintomas);\n \n     this.rulesService.getRulesContains(sintomas).then(data => {\n-      console.log('data',data);\n+      console.log('data',data.docs);\n       \n     })\n     \n   }\n"
                },
                {
                    "date": 1683843998937,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -35,9 +35,9 @@\n     const sintomas = this.signosSintomas.filter(element => element.checked).map(element => element.ID);\n     console.log('sintomas', sintomas);\n \n     this.rulesService.getRulesContains(sintomas).then(data => {\n-      console.log('data',data.docs);\n+      console.log('data',data);\n       \n     })\n     \n   }\n"
                },
                {
                    "date": 1683845640383,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,4 +1,5 @@\n+import { EnfermedadesService } from './../../../services/queries/enfermedades.service';\n import { SignosSintomasService } from './../../../services/queries/signos-sintomas.service';\n import { MdlSignosSintomas } from \"src/app/Interfaces/MdlSignosSintomas\";\n import { Component, OnInit } from '@angular/core';\n import { RulesService } from 'src/app/services/queries/rules.service';\n@@ -12,9 +13,9 @@\n export class ExpertSystemComponent implements OnInit {\n \n   signosSintomas: MdlSignosSintomas[] = [];\n \n-  constructor(private signosSintomasService: SignosSintomasService, private rulesService: RulesService) { }\n+  constructor(private signosSintomasService: SignosSintomasService, private rulesService: RulesService, private enfermedadesService:  EnfermedadesService) { }\n \n   ngOnInit(): void {\n     this.signosSintomasService.getSintomas().subscribe(data => {\n       console.log('data', data);\n@@ -36,8 +37,16 @@\n     console.log('sintomas', sintomas);\n \n     this.rulesService.getRulesContains(sintomas).then(data => {\n       console.log('data',data);\n+      if (data.length == 0) {\n+        alert('No hay reglas que cumplan con esos sintomas');\n+      }\n+      if (data.length == 1) {\n+       //  alert('Regla: ' + data[0].Descripcion);\n+       const enfermedad = this.enfermedadesService.getEnfermedadId(data[0].Enfermedad);\n+       alert('segun sintomas ' + sintomas + ' la enfermedad es ' + enfermedad);\n+      }\n       \n     })\n     \n   }\n"
                },
                {
                    "date": 1683845736536,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -42,10 +42,11 @@\n         alert('No hay reglas que cumplan con esos sintomas');\n       }\n       if (data.length == 1) {\n        //  alert('Regla: ' + data[0].Descripcion);\n-       const enfermedad = this.enfermedadesService.getEnfermedadId(data[0].Enfermedad);\n-       alert('segun sintomas ' + sintomas + ' la enfermedad es ' + enfermedad);\n+        this.enfermedadesService.getEnfermedadId(data[0].Enfermedad).then(enfermedad => {;\n+       alert('segun sintomas ' + sintomas + ' la enfermedad es ' + enfermedad[0].Descripcion)\n+      });\n       }\n       \n     })\n     \n"
                },
                {
                    "date": 1683845746188,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -43,9 +43,9 @@\n       }\n       if (data.length == 1) {\n        //  alert('Regla: ' + data[0].Descripcion);\n         this.enfermedadesService.getEnfermedadId(data[0].Enfermedad).then(enfermedad => {;\n-       alert('segun sintomas ' + sintomas + ' la enfermedad es ' + enfermedad[0].Descripcion)\n+       alert('Según sintomas ' + sintomas + ' la enfermedad es ' + enfermedad[0].Descripcion)\n       });\n       }\n       \n     })\n"
                },
                {
                    "date": 1683845833742,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -43,9 +43,9 @@\n       }\n       if (data.length == 1) {\n        //  alert('Regla: ' + data[0].Descripcion);\n         this.enfermedadesService.getEnfermedadId(data[0].Enfermedad).then(enfermedad => {;\n-       alert('Según sintomas ' + sintomas + ' la enfermedad es ' + enfermedad[0].Descripcion)\n+       alert('Según sintomas la enfermedad es ' + enfermedad[0].Descripcion)\n       });\n       }\n       \n     })\n"
                },
                {
                    "date": 1683846286685,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,9 +2,9 @@\n import { SignosSintomasService } from './../../../services/queries/signos-sintomas.service';\n import { MdlSignosSintomas } from \"src/app/Interfaces/MdlSignosSintomas\";\n import { Component, OnInit } from '@angular/core';\n import { RulesService } from 'src/app/services/queries/rules.service';\n-import { IRules } from 'src/app/Interfaces/MdlRules';\n+import { MdlRules } from 'src/app/Interfaces/MdlRules';\n \n @Component({\n   selector: 'app-expert-system',\n   templateUrl: './expert-system.component.html',\n@@ -39,16 +39,27 @@\n     this.rulesService.getRulesContains(sintomas).then(data => {\n       console.log('data',data);\n       if (data.length == 0) {\n         alert('No hay reglas que cumplan con esos sintomas');\n+        return\n       }\n       if (data.length == 1) {\n        //  alert('Regla: ' + data[0].Descripcion);\n         this.enfermedadesService.getEnfermedadId(data[0].Enfermedad).then(enfermedad => {;\n-       alert('Según sintomas la enfermedad es ' + enfermedad[0].Descripcion)\n+       alert('Según sintomas Hay una Gran probabilidad de que la la enfermedad sea ' + enfermedad[0].Descripcion)\n+       return\n       });\n       }\n+      let enfermedades = []\n+      data.forEach(element => {\n+        this.enfermedadesService.getEnfermedadId(element.Enfermedad).then(enfermedad => {\n+          enfermedades.push(enfermedad[0].Descripcion) \n+        })\n+\n+      })\n+      console.log('segun sintomas hay una gran probabilidad de que la enfermedad sean', enfermedades);\n       \n+      \n     })\n     \n   }\n \n"
                },
                {
                    "date": 1683846546102,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,8 +3,9 @@\n import { MdlSignosSintomas } from \"src/app/Interfaces/MdlSignosSintomas\";\n import { Component, OnInit } from '@angular/core';\n import { RulesService } from 'src/app/services/queries/rules.service';\n import { MdlRules } from 'src/app/Interfaces/MdlRules';\n+import { MdlEnfermedad } from 'src/app/Interfaces/MdlEnfermedad';\n \n @Component({\n   selector: 'app-expert-system',\n   templateUrl: './expert-system.component.html',\n@@ -48,16 +49,16 @@\n        alert('Según sintomas Hay una Gran probabilidad de que la la enfermedad sea ' + enfermedad[0].Descripcion)\n        return\n       });\n       }\n-      let enfermedades = []\n+      let enfermedades:string[] = []\n       data.forEach(element => {\n         this.enfermedadesService.getEnfermedadId(element.Enfermedad).then(enfermedad => {\n           enfermedades.push(enfermedad[0].Descripcion) \n         })\n \n       })\n-      console.log('segun sintomas hay una gran probabilidad de que la enfermedad sean', enfermedades);\n+      console.log('segun sintomas hay una gran probabilidad de que la enfermedad sean', enfermedades.join(', '));\n       \n       \n     })\n     \n"
                },
                {
                    "date": 1683846813682,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -13,9 +13,9 @@\n })\n export class ExpertSystemComponent implements OnInit {\n \n   signosSintomas: MdlSignosSintomas[] = [];\n-\n+  sintomasSelected: MdlSignosSintomas[] = []\n   constructor(private signosSintomasService: SignosSintomasService, private rulesService: RulesService, private enfermedadesService:  EnfermedadesService) { }\n \n   ngOnInit(): void {\n     this.signosSintomasService.getSintomas().subscribe(data => {\n@@ -30,14 +30,24 @@\n \n   Check(index:number){\n     this.signosSintomas[index].checked = !this.signosSintomas[index].checked;\n     console.log('signosSintomas', this.signosSintomas);\n+    this.sintomasSelected =  this.signosSintomas.filter(element => element.checked).map(element => element);\n   }\n \n   Generate(){\n     const sintomas = this.signosSintomas.filter(element => element.checked).map(element => element.ID);\n+    \n+    if (this.sintomasSelected.length == 0) {\n+      alert('Seleccione al menos un sintoma');\n+      return\n+    } \n+      \n+    \n     console.log('sintomas', sintomas);\n \n+    //if (sintomas.length == 0) \n+\n     this.rulesService.getRulesContains(sintomas).then(data => {\n       console.log('data',data);\n       if (data.length == 0) {\n         alert('No hay reglas que cumplan con esos sintomas');\n"
                },
                {
                    "date": 1683846897723,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -36,9 +36,9 @@\n \n   Generate(){\n     const sintomas = this.signosSintomas.filter(element => element.checked).map(element => element.ID);\n     \n-    if (this.sintomasSelected.length == 0) {\n+    if (this.sintomasSelected.length < 3) {\n       alert('Seleccione al menos un sintoma');\n       return\n     } \n       \n"
                },
                {
                    "date": 1683847159475,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -66,8 +66,10 @@\n           enfermedades.push(enfermedad[0].Descripcion) \n         })\n \n       })\n+      const a = new Set(enfermedades);\n+      enfermedades = [...a];\n       console.log('segun sintomas hay una gran probabilidad de que la enfermedad sean', enfermedades.join(', '));\n       \n       \n     })\n"
                },
                {
                    "date": 1683847263424,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -67,12 +67,14 @@\n         })\n \n       })\n       const a = new Set(enfermedades);\n-      enfermedades = [...a];\n-      console.log('segun sintomas hay una gran probabilidad de que la enfermedad sean', enfermedades.join(', '));\n+      let enfermedades2 = [...a];\n+      console.log('segun sintomas hay una gran probabilidad de que la enfermedad sean', enfermedades2.join(', '));\n+      console.log(enfermedades2);\n       \n       \n+      \n     })\n     \n   }\n \n"
                },
                {
                    "date": 1683847549179,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -59,15 +59,20 @@\n        alert('Según sintomas Hay una Gran probabilidad de que la la enfermedad sea ' + enfermedad[0].Descripcion)\n        return\n       });\n       }\n+      new Promise((resolve, reject) => {\n+\n       let enfermedades:string[] = []\n       data.forEach(element => {\n         this.enfermedadesService.getEnfermedadId(element.Enfermedad).then(enfermedad => {\n           enfermedades.push(enfermedad[0].Descripcion) \n         })\n \n       })\n+      resolve(enfermedades)\n+\n+    }).then((enfermedades: any) => {\n       const a = new Set(enfermedades);\n       let enfermedades2 = [...a];\n       console.log('segun sintomas hay una gran probabilidad de que la enfermedad sean', enfermedades2.join(', '));\n       console.log(enfermedades2);\n"
                },
                {
                    "date": 1683847587143,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -14,9 +14,9 @@\n export class ExpertSystemComponent implements OnInit {\n \n   signosSintomas: MdlSignosSintomas[] = [];\n   sintomasSelected: MdlSignosSintomas[] = []\n-  constructor(private signosSintomasService: SignosSintomasService, private rulesService: RulesService, private enfermedadesService:  EnfermedadesService) { }\n+  constructor(private signosSintomasService: SignosSintomasService, private rulesService: RulesService, private enfermedadesService: EnfermedadesService) { }\n \n   ngOnInit(): void {\n     this.signosSintomasService.getSintomas().subscribe(data => {\n       console.log('data', data);\n@@ -27,61 +27,63 @@\n     })\n \n   }\n \n-  Check(index:number){\n+  Check(index: number) {\n     this.signosSintomas[index].checked = !this.signosSintomas[index].checked;\n     console.log('signosSintomas', this.signosSintomas);\n-    this.sintomasSelected =  this.signosSintomas.filter(element => element.checked).map(element => element);\n+    this.sintomasSelected = this.signosSintomas.filter(element => element.checked).map(element => element);\n   }\n \n-  Generate(){\n+  Generate() {\n     const sintomas = this.signosSintomas.filter(element => element.checked).map(element => element.ID);\n-    \n+\n     if (this.sintomasSelected.length < 3) {\n       alert('Seleccione al menos un sintoma');\n       return\n-    } \n-      \n-    \n+    }\n+\n+\n     console.log('sintomas', sintomas);\n \n     //if (sintomas.length == 0) \n \n     this.rulesService.getRulesContains(sintomas).then(data => {\n-      console.log('data',data);\n+      console.log('data', data);\n       if (data.length == 0) {\n         alert('No hay reglas que cumplan con esos sintomas');\n         return\n       }\n       if (data.length == 1) {\n-       //  alert('Regla: ' + data[0].Descripcion);\n-        this.enfermedadesService.getEnfermedadId(data[0].Enfermedad).then(enfermedad => {;\n-       alert('Según sintomas Hay una Gran probabilidad de que la la enfermedad sea ' + enfermedad[0].Descripcion)\n-       return\n-      });\n+        //  alert('Regla: ' + data[0].Descripcion);\n+        this.enfermedadesService.getEnfermedadId(data[0].Enfermedad).then(enfermedad => {\n+          ;\n+          alert('Según sintomas Hay una Gran probabilidad de que la la enfermedad sea ' + enfermedad[0].Descripcion)\n+          return\n+        });\n       }\n       new Promise((resolve, reject) => {\n \n-      let enfermedades:string[] = []\n-      data.forEach(element => {\n-        this.enfermedadesService.getEnfermedadId(element.Enfermedad).then(enfermedad => {\n-          enfermedades.push(enfermedad[0].Descripcion) \n+        let enfermedades: string[] = []\n+        data.forEach(element => {\n+          this.enfermedadesService.getEnfermedadId(element.Enfermedad).then(enfermedad => {\n+            enfermedades.push(enfermedad[0].Descripcion)\n+          })\n+\n         })\n+        resolve(enfermedades)\n \n+      }).then((enfermedades: any) => {\n+        const a = new Set(enfermedades);\n+        let enfermedades2 = [...a];\n+        console.log('segun sintomas hay una gran probabilidad de que la enfermedad sean', enfermedades2.join(', '));\n+        console.log(enfermedades2);\n+\n+\n+\n       })\n-      resolve(enfermedades)\n \n-    }).then((enfermedades: any) => {\n-      const a = new Set(enfermedades);\n-      let enfermedades2 = [...a];\n-      console.log('segun sintomas hay una gran probabilidad de que la enfermedad sean', enfermedades2.join(', '));\n-      console.log(enfermedades2);\n-      \n-      \n-      \n     })\n-    \n   }\n \n   /*  async addRules() {\n      dataRules.forEach(async element => {\n"
                },
                {
                    "date": 1683847863982,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -46,9 +46,9 @@\n     console.log('sintomas', sintomas);\n \n     //if (sintomas.length == 0) \n \n-    this.rulesService.getRulesContains(sintomas).then(data => {\n+    this.rulesService.getRulesContains(sintomas).then(async data => {\n       console.log('data', data);\n       if (data.length == 0) {\n         alert('No hay reglas que cumplan con esos sintomas');\n         return\n@@ -60,9 +60,9 @@\n           alert('Según sintomas Hay una Gran probabilidad de que la la enfermedad sea ' + enfermedad[0].Descripcion)\n           return\n         });\n       }\n-      new Promise((resolve, reject) => {\n+       const enfermedades = await new Promise((resolve, reject) => {\n \n         let enfermedades: string[] = []\n         data.forEach(element => {\n           this.enfermedadesService.getEnfermedadId(element.Enfermedad).then(enfermedad => {\n"
                },
                {
                    "date": 1683848347092,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -14,9 +14,9 @@\n export class ExpertSystemComponent implements OnInit {\n \n   signosSintomas: MdlSignosSintomas[] = [];\n   sintomasSelected: MdlSignosSintomas[] = []\n-  constructor(private signosSintomasService: SignosSintomasService, private rulesService: RulesService, private enfermedadesService: EnfermedadesService) { }\n+  constructor(private signosSintomasService: SignosSintomasService, private rulesService: RulesService, private enfermedadesService:  EnfermedadesService) { }\n \n   ngOnInit(): void {\n     this.signosSintomasService.getSintomas().subscribe(data => {\n       console.log('data', data);\n@@ -27,63 +27,60 @@\n     })\n \n   }\n \n-  Check(index: number) {\n+  Check(index:number){\n     this.signosSintomas[index].checked = !this.signosSintomas[index].checked;\n     console.log('signosSintomas', this.signosSintomas);\n-    this.sintomasSelected = this.signosSintomas.filter(element => element.checked).map(element => element);\n+    this.sintomasSelected =  this.signosSintomas.filter(element => element.checked).map(element => element);\n   }\n \n-  Generate() {\n+  Generate(){\n     const sintomas = this.signosSintomas.filter(element => element.checked).map(element => element.ID);\n-\n+    \n     if (this.sintomasSelected.length < 3) {\n       alert('Seleccione al menos un sintoma');\n       return\n-    }\n-\n-\n+    } \n+      \n+    \n     console.log('sintomas', sintomas);\n \n     //if (sintomas.length == 0) \n \n-    this.rulesService.getRulesContains(sintomas).then(async data => {\n-      console.log('data', data);\n+    this.rulesService.getRulesContains(sintomas).then(data => {\n+      console.log('data',data);\n       if (data.length == 0) {\n         alert('No hay reglas que cumplan con esos sintomas');\n         return\n       }\n       if (data.length == 1) {\n-        //  alert('Regla: ' + data[0].Descripcion);\n-        this.enfermedadesService.getEnfermedadId(data[0].Enfermedad).then(enfermedad => {\n-          ;\n-          alert('Según sintomas Hay una Gran probabilidad de que la la enfermedad sea ' + enfermedad[0].Descripcion)\n-          return\n-        });\n+       //  alert('Regla: ' + data[0].Descripcion);\n+        this.enfermedadesService.getEnfermedadId(data[0].Enfermedad).then(enfermedad => {;\n+       alert('Según sintomas Hay una Gran probabilidad de que la la enfermedad sea ' + enfermedad[0].Descripcion)\n+       return\n+      });\n       }\n-       const enfermedades = await new Promise((resolve, reject) => {\n+      let enfermedades:string[] = []\n+        this.enfermedadesService.getEnfermedadIds(data.map((data)=>{return data.Enfermedad})).then(enfermedades => {\n+          enfermedades.push(enfermedades[0]) \n+        })\n \n-        let enfermedades: string[] = []\n-        data.forEach(element => {\n-          this.enfermedadesService.getEnfermedadId(element.Enfermedad).then(enfermedad => {\n-            enfermedades.push(enfermedad[0].Descripcion)\n-          })\n-\n+     /*  data.forEach(element => {\n+        this.enfermedadesService.getEnfermedadId(element.Enfermedad).then(enfermedad => {\n+          enfermedades.push(enfermedad[0].Descripcion) \n         })\n-        resolve(enfermedades)\n \n-      }).then((enfermedades: any) => {\n-        const a = new Set(enfermedades);\n-        let enfermedades2 = [...a];\n-        console.log('segun sintomas hay una gran probabilidad de que la enfermedad sean', enfermedades2.join(', '));\n-        console.log(enfermedades2);\n-\n-\n-\n-      })\n-\n+      }) */\n+      const a = new Set(enfermedades);\n+      enfermedades = [...a];\n+      console.log('segun sintomas hay una gran probabilidad de que la enfermedad sean', enfermedades.join(', '));\n+      console.log();\n+      \n+      \n+      \n     })\n+    \n   }\n \n   /*  async addRules() {\n      dataRules.forEach(async element => {\n"
                },
                {
                    "date": 1683848730541,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -47,9 +47,9 @@\n \n     //if (sintomas.length == 0) \n \n     this.rulesService.getRulesContains(sintomas).then(data => {\n-      console.log('data',data);\n+      console.log('Rules',data);\n       if (data.length == 0) {\n         alert('No hay reglas que cumplan con esos sintomas');\n         return\n       }\n@@ -61,8 +61,10 @@\n       });\n       }\n       let enfermedades:string[] = []\n         this.enfermedadesService.getEnfermedadIds(data.map((data)=>{return data.Enfermedad})).then(enfermedades => {\n+          console.log('enfermedades', enfermedades);');\n+          \n           enfermedades.push(enfermedades[0]) \n         })\n \n      /*  data.forEach(element => {\n"
                },
                {
                    "date": 1683848737480,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -61,9 +61,9 @@\n       });\n       }\n       let enfermedades:string[] = []\n         this.enfermedadesService.getEnfermedadIds(data.map((data)=>{return data.Enfermedad})).then(enfermedades => {\n-          console.log('enfermedades', enfermedades);');\n+          console.log('enfermedades', enfermedades);\n           \n           enfermedades.push(enfermedades[0]) \n         })\n \n"
                },
                {
                    "date": 1683854787028,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -59,8 +59,9 @@\n        alert('Según sintomas Hay una Gran probabilidad de que la la enfermedad sea ' + enfermedad[0].Descripcion)\n        return\n       });\n       }\n+      \n       let enfermedades:string[] = []\n         this.enfermedadesService.getEnfermedadIds(data.map((data)=>{return data.Enfermedad})).then(enfermedades => {\n           console.log('enfermedades', enfermedades);\n           \n"
                },
                {
                    "date": 1683855751327,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -11,9 +11,10 @@\n   templateUrl: './expert-system.component.html',\n   styleUrls: ['./expert-system.component.scss']\n })\n export class ExpertSystemComponent implements OnInit {\n-\n+mostrarAddEnfermedad = false\n+newEnfermedad : string = ''\n   signosSintomas: MdlSignosSintomas[] = [];\n   sintomasSelected: MdlSignosSintomas[] = []\n   constructor(private signosSintomasService: SignosSintomasService, private rulesService: RulesService, private enfermedadesService:  EnfermedadesService) { }\n \n"
                },
                {
                    "date": 1683855882901,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -12,9 +12,9 @@\n   styleUrls: ['./expert-system.component.scss']\n })\n export class ExpertSystemComponent implements OnInit {\n mostrarAddEnfermedad = false\n-newEnfermedad : string = ''\n+newEnfermedad :any\n   signosSintomas: MdlSignosSintomas[] = [];\n   sintomasSelected: MdlSignosSintomas[] = []\n   constructor(private signosSintomasService: SignosSintomasService, private rulesService: RulesService, private enfermedadesService:  EnfermedadesService) { }\n \n"
                },
                {
                    "date": 1683856485560,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -34,8 +34,20 @@\n     console.log('signosSintomas', this.signosSintomas);\n     this.sintomasSelected =  this.signosSintomas.filter(element => element.checked).map(element => element);\n   }\n \n+  addEnfermedad(){\n+    const data : MdlEnfermedad = {\n+      Descripcion: this.newEnfermedad,\n+      ID: new Date().valueOf().toString()\n+    \n+    }\n+    this.enfermedadesService.addEnfermedad(data).then(data => {\n+      alert('Enfermedad Agregada Gracias')\n+      this.mostrarAddEnfermedad = false\n+    })\n+  }\n+\n   Generate(){\n     const sintomas = this.signosSintomas.filter(element => element.checked).map(element => element.ID);\n     \n     if (this.sintomasSelected.length < 3) {\n"
                },
                {
                    "date": 1683856704245,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -63,8 +63,9 @@\n     this.rulesService.getRulesContains(sintomas).then(data => {\n       console.log('Rules',data);\n       if (data.length == 0) {\n         alert('No hay reglas que cumplan con esos sintomas');\n+        this.mostrarAddEnfermedad = true\n         return\n       }\n       if (data.length == 1) {\n        //  alert('Regla: ' + data[0].Descripcion);\n"
                },
                {
                    "date": 1683857172014,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -35,16 +35,27 @@\n     this.sintomasSelected =  this.signosSintomas.filter(element => element.checked).map(element => element);\n   }\n \n   addEnfermedad(){\n+    const Id = new Date().valueOf().toString();\n     const data : MdlEnfermedad = {\n       Descripcion: this.newEnfermedad,\n-      ID: new Date().valueOf().toString()\n+      ID: Id\n     \n     }\n     this.enfermedadesService.addEnfermedad(data).then(data => {\n-      alert('Enfermedad Agregada Gracias')\n+      console.log('enfermedad añadida', data);\n+      \n+      const rule: MdlRules = {\n+        ID: new Date().valueOf().toString(),\n+        Enfermedad : Id,\n+        Descripcion: this.signosSintomas.filter(element => element.checked).map(element => element.ID)\n+      }\n+      this.rulesService.addRules(rule).then(data => {\n+        alert('Enfermedad Agregada Gracias')\n       this.mostrarAddEnfermedad = false\n+      })\n+      \n     })\n   }\n \n   Generate(){\n"
                },
                {
                    "date": 1683954734015,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -58,8 +58,9 @@\n     })\n   }\n \n   Generate(){\n+    this.mostrarAddEnfermedad = false;\n     const sintomas = this.signosSintomas.filter(element => element.checked).map(element => element.ID);\n     \n     if (this.sintomasSelected.length < 3) {\n       alert('Seleccione al menos un sintoma');\n"
                },
                {
                    "date": 1683954760140,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -62,9 +62,9 @@\n     this.mostrarAddEnfermedad = false;\n     const sintomas = this.signosSintomas.filter(element => element.checked).map(element => element.ID);\n     \n     if (this.sintomasSelected.length < 3) {\n-      alert('Seleccione al menos un sintoma');\n+      alert('Seleccione al menos un síntoma');\n       return\n     } \n       \n     \n"
                },
                {
                    "date": 1684220052406,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -13,8 +13,11 @@\n })\n export class ExpertSystemComponent implements OnInit {\n mostrarAddEnfermedad = false\n newEnfermedad :any\n+data : any[] = [];\n+dataFile!: File; \n+\n   signosSintomas: MdlSignosSintomas[] = [];\n   sintomasSelected: MdlSignosSintomas[] = []\n   constructor(private signosSintomasService: SignosSintomasService, private rulesService: RulesService, private enfermedadesService:  EnfermedadesService) { }\n \n@@ -107,11 +110,33 @@\n       \n       \n       \n     })\n+\n+   \n     \n   }\n \n+  FillDatabase() {\n+    const File: File = this.dataFile\n+    if (File.type == 'text/csv') {\n+      this.data = []\n+\n+      File.text().then((data) => {\n+        const list = data.split(\"\\n\")//.splice(0,1);\n+        const initialCell = 2 \n+\n+        list.splice(0, initialCell);\n+        list.forEach((e: any) => {\n+          this.data.push(e);\n+        });\n+        console.log('data', this.data);\n+        \n+      })\n+\n+    }\n+  }\n+\n   /*  async addRules() {\n      dataRules.forEach(async element => {\n        const response = await this.rulesService.addRules(element);\n        console.log('response', response);\n"
                },
                {
                    "date": 1684220261762,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -114,8 +114,16 @@\n \n    \n     \n   }\n+  onFileSelected(event: any) {\n+    if (event.target.files.length > 0) {\n+      this.dataFile = event.target.files[0] as File\n+      if (this.dataFile.type == 'text/csv') {\n+        this.FillDatabase();\n+      }\n+    }\n+  }\n \n   FillDatabase() {\n     const File: File = this.dataFile\n     if (File.type == 'text/csv') {\n"
                },
                {
                    "date": 1684220684258,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -130,9 +130,9 @@\n       this.data = []\n \n       File.text().then((data) => {\n         const list = data.split(\"\\n\")//.splice(0,1);\n-        const initialCell = 2 \n+        const initialCell = 1\n \n         list.splice(0, initialCell);\n         list.forEach((e: any) => {\n           this.data.push(e);\n"
                },
                {
                    "date": 1684220865781,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -133,12 +133,15 @@\n         const list = data.split(\"\\n\")//.splice(0,1);\n         const initialCell = 1\n \n         list.splice(0, initialCell);\n-        list.forEach((e: any) => {\n-          this.data.push(e);\n+        list.forEach((e: string) => {\n+          const element = e.replace(/\"/g, \"\").replace(/n\"/g, \"\").split(\",\");\n+          this.data.push(element);\n         });\n         console.log('data', this.data);\n+\n+        data\n         \n       })\n \n     }\n"
                },
                {
                    "date": 1684220921567,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -134,9 +134,9 @@\n         const initialCell = 1\n \n         list.splice(0, initialCell);\n         list.forEach((e: string) => {\n-          const element = e.replace(/\"/g, \"\").replace(/n\"/g, \"\").split(\",\");\n+          const element = e.replace(/\"/g, \"\").replace(/\\n/g, \"\").split(\",\");\n           this.data.push(element);\n         });\n         console.log('data', this.data);\n \n"
                },
                {
                    "date": 1684220937155,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -134,9 +134,9 @@\n         const initialCell = 1\n \n         list.splice(0, initialCell);\n         list.forEach((e: string) => {\n-          const element = e.replace(/\"/g, \"\").replace(/\\n/g, \"\").split(\",\");\n+          const element = e.replace(/\"/g, \"\").replace(/\\r/g, \"\").split(\",\");\n           this.data.push(element);\n         });\n         console.log('data', this.data);\n \n"
                },
                {
                    "date": 1684221089391,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -133,10 +133,11 @@\n         const list = data.split(\"\\n\")//.splice(0,1);\n         const initialCell = 1\n \n         list.splice(0, initialCell);\n-        list.forEach((e: string) => {\n-          const element = e.replace(/\"/g, \"\").replace(/\\r/g, \"\").split(\",\");\n+        list.forEach((e: any) => {\n+          let element = e.replace(/\"/g, \"\").replace(/\\r/g, \"\").split(\",\");\n+          element[3] = element[3].split(\".\");\n           this.data.push(element);\n         });\n         console.log('data', this.data);\n \n"
                },
                {
                    "date": 1684221402312,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -140,9 +140,8 @@\n           this.data.push(element);\n         });\n         console.log('data', this.data);\n \n-        data\n         \n       })\n \n     }\n"
                },
                {
                    "date": 1684222022256,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -50,9 +50,10 @@\n       \n       const rule: MdlRules = {\n         ID: new Date().valueOf().toString(),\n         Enfermedad : Id,\n-        Descripcion: this.signosSintomas.filter(element => element.checked).map(element => element.ID)\n+        Descripcion: this.signosSintomas.filter(element => element.checked).map(element => element.ID),\n+        NameEmfermedad:this.newEnfermedad\n       }\n       this.rulesService.addRules(rule).then(data => {\n         alert('Enfermedad Agregada Gracias')\n       this.mostrarAddEnfermedad = false\n@@ -137,8 +138,14 @@\n         list.forEach((e: any) => {\n           let element = e.replace(/\"/g, \"\").replace(/\\r/g, \"\").split(\",\");\n           element[3] = element[3].split(\".\");\n           this.data.push(element);\n+          const dato = {\n+            ID: element[0],\n+            Descripcion: element[3],\n+            Enfermedad: element[2],\n+            NameEmfermedad: element[1]\n+          }\n         });\n         console.log('data', this.data);\n \n         \n"
                },
                {
                    "date": 1684222129523,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -132,9 +132,9 @@\n \n       File.text().then((data) => {\n         const list = data.split(\"\\n\")//.splice(0,1);\n         const initialCell = 1\n-\n+        let dataDB:any[] = []\n         list.splice(0, initialCell);\n         list.forEach((e: any) => {\n           let element = e.replace(/\"/g, \"\").replace(/\\r/g, \"\").split(\",\");\n           element[3] = element[3].split(\".\");\n@@ -144,9 +144,13 @@\n             Descripcion: element[3],\n             Enfermedad: element[2],\n             NameEmfermedad: element[1]\n           }\n+          dataDB.push(dato)\n+        \n         });\n+\n+        console.log('data DB', dataDB);\n         console.log('data', this.data);\n \n         \n       })\n"
                },
                {
                    "date": 1684222280229,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -141,9 +141,9 @@\n           this.data.push(element);\n           const dato = {\n             ID: element[0],\n             Descripcion: element[3],\n-            Enfermedad: element[2],\n+            Enfermedad: '00'+element[2],\n             NameEmfermedad: element[1]\n           }\n           dataDB.push(dato)\n         \n"
                },
                {
                    "date": 1684222326734,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -141,9 +141,9 @@\n           this.data.push(element);\n           const dato = {\n             ID: element[0],\n             Descripcion: element[3],\n-            Enfermedad: '00'+element[2],\n+            Enfermedad: element[2],\n             NameEmfermedad: element[1]\n           }\n           dataDB.push(dato)\n         \n"
                },
                {
                    "date": 1684222374669,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -132,11 +132,10 @@\n \n       File.text().then((data) => {\n         const list = data.split(\"\\n\")//.splice(0,1);\n         const initialCell = 1\n-        let dataDB:any[] = []\n         list.splice(0, initialCell);\n-        list.forEach((e: any) => {\n+        list.forEach(async (e: any) => {\n           let element = e.replace(/\"/g, \"\").replace(/\\r/g, \"\").split(\",\");\n           element[3] = element[3].split(\".\");\n           this.data.push(element);\n           const dato = {\n@@ -144,13 +143,12 @@\n             Descripcion: element[3],\n             Enfermedad: element[2],\n             NameEmfermedad: element[1]\n           }\n-          dataDB.push(dato)\n+          const response = await this.rulesService.addRules(dato);\n         \n         });\n \n-        console.log('data DB', dataDB);\n         console.log('data', this.data);\n \n         \n       })\n"
                },
                {
                    "date": 1684222648413,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -84,12 +84,14 @@\n         return\n       }\n       if (data.length == 1) {\n        //  alert('Regla: ' + data[0].Descripcion);\n-        this.enfermedadesService.getEnfermedadId(data[0].Enfermedad).then(enfermedad => {;\n-       alert('Según sintomas Hay una Gran probabilidad de que la la enfermedad sea ' + enfermedad[0].Descripcion)\n+       alert('Según sintomas Hay una Gran probabilidad de que la la enfermedad sea ' + data[0].NameEmfermedad)\n        return\n-      });\n+       /*  this.enfermedadesService.getEnfermedadId(data[0].Enfermedad).then(enfermedad => {;\n+       alert('Según sintomas Hay una Gran probabilidad de que la la enfermedad sea ' + enfermedad[0].Descripcion) \n+       return\n+      });*/\n       }\n       \n       let enfermedades:string[] = []\n         this.enfermedadesService.getEnfermedadIds(data.map((data)=>{return data.Enfermedad})).then(enfermedades => {\n"
                },
                {
                    "date": 1684223305120,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -162,19 +162,29 @@\n      dataRules.forEach(async element => {\n        const response = await this.rulesService.addRules(element);\n        console.log('response', response);\n      }) \n-   }\n+   }*/\n   async addSintomas() {\n     dataSintomas.forEach(async (element: MdlSignosSintomas) => {\n       const response = await this.signosSintomasService.addSintomas(element);\n       console.log('response', response);\n     })\n   }\n-*/\n+\n }\n-/* const dataSintomas: MdlSignosSintomas[] = [\n+ const dataSintomas: MdlSignosSintomas[] = [\n   {\n+    ID: '101',\n+    Descripcion: 'Dolor de cabeza',\n+    order: 1\n+  },\n+  {\n+    ID: '102',\n+    Descripcion: 'Escalofrio',\n+    order: 2\n+  },\n+  {\n     ID: '103',\n     Descripcion: 'Migraña',\n     order: 3\n   },\n@@ -226,11 +236,46 @@\n   {\n     ID: '113',\n     Descripcion: 'Diarrea',\n     order: 13\n+  },\n+  {\n+    ID: '114',\n+    Descripcion: 'Goteo Nariz',\n+    order: 14\n+  },\n+  {\n+    ID: '115',\n+    Descripcion: 'Ojos Inflamados',\n+    order: 15\n+  },\n+  {\n+    ID: '116',\n+    Descripcion: 'Colicos',\n+    order: 16\n+  },\n+  {\n+    ID: '117',\n+    Descripcion: 'Perdida de peso',\n+    order: 17\n+  },\n+  {\n+    ID: '201',\n+    Descripcion: 'Fiebre',\n+    order: 18\n+  },\n+  {\n+    ID: '202',\n+    Descripcion: 'Flema',\n+    order: 19\n+  },\n+  {\n+    ID: '203',\n+    Descripcion: 'Manchas Blancas en la piel',\n+    order: 20\n   }\n ]\n- */\n+ \n /* const dataRules = [\n   {\n     ID: 'R3',\n     Descripcion: ['102', '103', '104'],\n"
                }
            ],
            "date": 1683789106727,
            "name": "Commit-0",
            "content": "import { SignosSintomasService } from './../../../services/queries/signos-sintomas.service';\nimport { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-expert-system',\n  templateUrl: './expert-system.component.html',\n  styleUrls: ['./expert-system.component.scss']\n})\nexport class ExpertSystemComponent implements OnInit {\n\n  constructor(private signosSintomasService: SignosSintomasService) { }\n\n  ngOnInit(): void {\n    this.signosSintomasService.getSintomas().subscribe(data => {\n      console.log('data',data);\n      \n    })\n  \n  }\n\n}\n"
        }
    ]
}